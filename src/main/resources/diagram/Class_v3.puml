@startuml
'https://plantuml.com/class-diagram

'entities
Entities.User *-- Entities.Address
Entities.Order *-- Entities.Carport
Entities.User o--o Entities.Order


'persistence
Persistence.UserMapper *-- Persistence.ConnectionPool
Persistence.CarportMapper *-- Persistence.ConnectionPool
Persistence.OrderMapper *-- Persistence.ConnectionPool
Persistence.AdminMapper *-- Persistence.ConnectionPool
Controllers *-- Persistence.ConnectionPool
Controllers <-- SVG.CarportSVG
Controllers <-- MailServer.MailServer
Entities o--o Controllers
Persistence o--o Entities

'Main connections
Main <-- Controllers.HeaderController
Main <-- Controllers.CarportShopController
Main <-- Controllers.UserController
Main <-- Controllers.AdminPanelController


'Services
SVG.CarportSVG <-- SVG.SVGDrawer

class Main {
+main(String args[]): void
}

package Entities {
class Carport {
-int carportID
-double width
-double length
-String material
-boolean hasShed
-Map materialList<Material material, Integer amount>
}

class User {
-int userID
-String email
-String password
-boolean isAdmin
-Address address
-Order order
}

class Address {
-int addressId
-int postalCode
-String cityName
-String streetName
}

class Order {
-int orderId
-String status
-User user
-Carport carport
}
}

package Persistence {
class ConnectionPool {
+getInstance() : ConnectionPool
+getConnection() : Connection
+close() : void
-createHikariConnectionPool() : getHikariConnection
}

class CarportMapper {
+getCarportByID(int ID) : Carport
}

class UserMapper {
+login( String email, String password ) : User
+createUser( String name, String password, String role ) : void
+deleteUser( int userID ) : void
+getAllUsers() : List<User>
+checkIfUserExistsByName(String email, ConnectionPool connectionPool) : boolean
+getUserByUserId(int userId, ConnectionPool connectionPool) : User
}

class OrderMapper {
+getAllOrders() : List<Order>
+getOrderByUser() : Order
+deleteOrderById( int orderID ) : void
+getLastOrderID() : int
+updateStatus( int orderID, String status ) : void
+getLastOrderID() : int
+insertNewOrder(User user, String status, int carportId, ConnectionPool connectionPool) : void
}

class AdminMapper {
+editMaterials( Object... changedMaterials) : boolean
+addMaterial( Material material ) : boolean
}

class MaterialMapper {
+getAllLength() : List<Double>
+getAllWidth() : List<Double>
+deleteMaterialById(int ID) : void
+getAllMaterials() : List<Material>
+getMaterialById(int ID) : Material
}
}

package Controllers {
class UserController {
+registerUser() : void
+login() : void
+logout() : void
+createUser() : void
+userStatus() : void
}

class CarportShopController {
+orderButtonOne() : void
+orderButtonTwo() : void
+orderButtonThree() : void
+orderCarport() : void
-drawCarport() : void
}

class HeaderController {
+gotoShop() : void
+gotoCreateUser() : void
+gotoOrder() : void
+gotoLogin() : void
+gotoAdmin() : void
}

class AdminPanelController {
+editMaterials() : void
+addMaterial() : void
-removeMaterial() : void
-removeOrder() : void
}
}

package MailServer {
class MailServer {
-sendMail(String to, String name, String zip) : boolean
}
}

package SVG {
class SVGDrawer {
-String SVG_TEMPLATE
-String SVG_ARROW_DEFS
+addRectangle(double x, double y, double height, double width, String style) : void
+addLine(int x1, int y1, int x2, int y2, String style) : void
+addArrow(int x1, int y1, int x2, int y2, String style) : void
+addSvg(SVGDrawer innerSvg)
}

class carportSVG {
-SVGDrawer carportSvg
-addBeams() : void
-addRafters() : void
}
}


@enduml