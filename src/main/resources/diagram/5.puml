@startuml
'https://plantuml.com/class-diagram

'entities
Entities.User *-- Entities.Address
Entities.Order *-- Entities.Carport
Entities.User o--o Entities.Order


'persistence
Persistence.UserMapper *-- Persistence.ConnectionPool
Persistence.CarportMapper *-- Persistence.ConnectionPool
Persistence.OrderMapper *-- Persistence.ConnectionPool
Persistence.MaterialMapper *-- Persistence.ConnectionPool
Persistence.AddressMapper *-- Persistence.ConnectionPool
Controllers *-- Persistence.ConnectionPool

Entities o--o Controllers
Persistence o--o Entities

'Main connections
Main <-- Controllers.HeaderController
Main <-- Controllers.CarportShopController
Main <-- Controllers.UserController
Main <-- Controllers.AdminPanelController


'Services
Controllers <-- Services

class Main {
+main(String args[]): void
}

package Entities {
class Carport {
-int carportID
-double width
-double length
-String material
-boolean hasShed
-boolean withRoof
-int totalPrice
-Map materialList<Material material, Integer amount>
+calculateTotalPrice() : double
+setMaterialList( ConnectionPool c ) : void
}

class Material {
-double length
-int materialID
-String name
-double price
-int quantityInStock
-String unit
}

class User {
-int userID
-String email
-String firstName
-String lastName
-String password
-boolean isAdmin
-Address address
-int phoneNumber
-Order order
}

class Address {
-int addressId
-int postalCode
-int houseNumber
-String cityName
-String streetName
}

class Order {
-int totalPrice
-int orderId
-String status
-User user
-Carport carport
}
}

package Persistence {
class ConnectionPool {
+getInstance() : ConnectionPool
+getConnection() : Connection
}

class CarportMapper {
+getCarportByID( int ID ) : Carport
+getCarportIDByWidthAndLength( double width, double length, boolean withRoof ) : int
}

class UserMapper {
+checkIfUserExistsByName( String email ) : boolean
+createTempUser( User user ) : boolean
+createUser( String name, String password, String role ) : boolean
+deleteUser( int userID ) : boolean
+getAllUsers() : List<User>
+getLastUserId() : int
+getUserByUserId( int userId ) : User
+login( String email, String password ) : User
+updatePassword( User user ) : boolean
+updateUser( User user ) : boolean
}

class OrderMapper {
+acceptOrder( int orderID ) : boolean
+deleteOrderById( int orderID ) : boolean
+denyOrder( int orderID ) : boolean
+getAllOrders() : List<Order>
+getLastOrderID() : int
+getOrderByOrderId( int orderID ) : Order
+getOrderByUser() : Order
+insertNewOrder(User user, String status, int carportId, ConnectionPool connectionPool) : boolean
}

class MaterialMapper {
+addMaterial( String name, double price, double length, String unit, int quantityInStock )
+deleteMaterialById( int materialID ) : boolean
+getAllLength() : List<Double>
+getAllMaterials( int materialID ) : List<Material>
+getAllWidth() : List<Double>
+getMaterialById( int ID ) : Material
+removeMaterialStockOnOrder(Map<Material, Integer> materialList : boolean
+updateMaterial( int materialID, String name, double price, double length, String unit, int quantityInStock ) : boolean
}

class AddressMapper {
+insertAddress( Address address ) : boolean
+updateAddress( Address address ) : boolean
+getAddressByAddressId( int addressId ) : Address
+insertCityData( Address address ) : boolean
+updateCityData( Address address ) : boolean
}
}

package Controllers {
class UserController {
+checkPassword( String password ) : boolean
-createPassword() : void
+createUser() : void
+goTocreateUser() : void
+login() : void
-loginNoUser() : void
+logout() : void
+renderUserSite() : void
+updateUser() : void
}

class CarportShopController {
+checkNames() : boolean
+orderButtonOne() : void
+orderButtonTwo() : void
+orderButtonThree() : void
+orderCarport() : void
+renderCarportShop() : void
}

class HeaderController {
+goToUserSite() : void
+goToLogin() : void
+goToAdmin() : void
+goToIndex() : void
}

class AdminPanelController {
-acceptOrder() : void
-addMaterial() : void
-denyOrder() : void
+inspectOrder() : void
-removeMaterial() : void
-removeOrder() : void
+renderEditMaterial() : void
-renderUpdate() : void
-updateMaterial() : void
}
}

package Services {
class SVGDrawer {
-String SVG_TEMPLATE
-String SVG_RECT_TEMPLATE
-String SVG_ARROW_DEFS
+addRectangle(double x, double y, double height, double width, String style) : void
+addLine(int x1, int y1, int x2, int y2, String style) : void
+addArrow(int x1, int y1, int x2, int y2, String style) : void
+addSvg(SVGDrawer innerSvg) : void
+addText(int x, int y, int rotation, String text) : void
}

class carportSVG {
-int length
-int width
-SVGDrawer carportSvg
-addBeams() : void
-addRafters() : void
-addArrows() : void
-addPost() : void
}

class MailServer {
-String API_KEY
-String email
+mailOnOrder( User user ) : boolean
+mailOnOrderDone( Order order ) : boolean
+mailOnStatusUpdate( Order order ) : boolean
+mailOnUserChange( User user ) : boolean
}
}



@enduml